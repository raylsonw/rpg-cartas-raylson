{"version":3,"sources":["index.js"],"names":["cards","to","i","x","y","scale","rot","Math","random","delay","from","trans","r","s","concat","Deck","_useState","useState","Set","gone","Object","D_Files_Sites_Outros_RPG_cartas_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","_useSprings","useSprings","length","D_Files_Sites_Outros_RPG_cartas_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","_useSprings2","props","set","bind","useGesture","_ref","index","args","down","xDelta","delta","xDir","distance","direction","velocity","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","map","_ref2","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","react_spring__WEBPACK_IMPORTED_MODULE_4__","div","key","style","transform","interpolate","assign","backgroundImage","render","document","getElementById"],"mappings":"uJAMMA,SAAQ,CACZ,sBACA,wBACA,oBACA,wBACA,uBACA,uBACA,yBAIIC,EAAK,SAAAC,GAAC,MAAK,CAAEC,EAAG,EAAGC,GAAQ,EAALF,EAAQG,MAAO,EAAGC,IAA2B,GAAhBC,KAAKC,SAAV,GAAyBC,MAAW,IAAJP,IAC9EQ,EAAO,SAAAR,GAAC,MAAK,CAAEC,EAAG,EAAGG,IAAK,EAAGD,MAAO,IAAKD,GAAI,MAE7CO,EAAQ,SAACC,EAAGC,GAAC,oDAAAC,OAAmDF,EAAI,GAAE,iBAAAE,OAAgBF,EAAC,eAAAE,OAAcD,EAAC,MAE5G,SAASE,IAAO,IAAAC,EACCC,mBAAS,kBAAM,IAAIC,MAA3BC,EAAiCC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAA7B,GAA8BM,EACpBC,YAAWvB,EAAMwB,OAAQ,SAAAtB,GAAC,OAAAkB,OAAAK,EAAA,EAAAL,CAAA,GAAUnB,EAAGC,GAAE,CAAEQ,KAAMA,EAAKR,OAAMwB,EAAAN,OAAAC,EAAA,EAAAD,CAAAE,EAAA,GAA1EK,EAAKD,EAAA,GAAEE,EAAGF,EAAA,GAEXG,EAAOC,YAAW,SAAAC,GAAqF,IAA3EC,EAA2EZ,OAAAC,EAAA,EAAAD,CAAAW,EAAlFE,KAAI,GAAQ,GAAGC,EAAIH,EAAJG,KAAcC,EAAVf,OAAAC,EAAA,EAAAD,CAAAW,EAAEK,MAAK,GAAS,GAAyBC,GAAdN,EAARO,SAAQlB,OAAAC,EAAA,EAAAD,CAAAW,EAAEQ,UAAS,GAAO,IAAGC,EAAQT,EAARS,SAEtFC,EAAMJ,EAAO,GAAK,EAAI,GACvBH,GAFWM,EAAW,IAELrB,EAAKuB,IAAIV,GAC/BJ,EAAI,SAAA1B,GACF,GAAI8B,IAAU9B,EAAd,CACA,IAAMyC,EAASxB,EAAKyB,IAAIZ,GAIxB,MAAO,CAAE7B,EAHCwC,GAAU,IAAME,OAAOC,YAAcL,EAAMP,EAAOC,EAAS,EAGzD7B,IAFA6B,EAAS,KAAOQ,EAAe,GAANF,EAAWD,EAAW,GAE1CnC,MADH6B,EAAO,IAAM,EACHzB,WAAOsC,EAAWC,OAAQ,CAAEC,SAAU,GAAIC,QAAShB,EAAO,IAAMS,EAAS,IAAM,SAEpGT,GAAQf,EAAKgC,OAASnD,EAAMwB,QAAQ4B,WAAW,kBAAMjC,EAAKkC,SAAWzB,EAAI,SAAA1B,GAAC,OAAID,EAAGC,MAAK,OAG7F,OAAOyB,EAAM2B,IAAI,SAAAC,EAAuBrD,GAAC,IAArBC,EAACoD,EAADpD,EAAGC,EAACmD,EAADnD,EAAGE,EAAGiD,EAAHjD,IAAKD,EAAKkD,EAALlD,MAAK,OAClCmD,EAAAC,EAAAC,cAACC,EAAA,EAASC,IAAG,CAACC,IAAK3D,EAAG4D,MAAO,CAAEC,UAAWC,YAAY,CAAC7D,EAAGC,GAAI,SAACD,EAAGC,GAAC,qBAAAU,OAAoBX,EAAC,OAAAW,OAAMV,EAAC,aAE7FoD,EAAAC,EAAAC,cAACC,EAAA,EAASC,IAAGxC,OAAA6C,OAAA,GAAKpC,EAAK3B,GAAE,CAAE4D,MAAO,CAAEC,UAAWC,YAAY,CAAC1D,EAAKD,GAAQM,GAAQuD,gBAAe,OAAApD,OAASd,EAAME,GAAE,YAKvHiE,iBAAOX,EAAAC,EAAAC,cAAC3C,EAAI,MAAKqD,SAASC,eAAe","file":"static/js/main.978ea9b8.chunk.js","sourcesContent":["import { render } from 'react-dom'\r\nimport React, { useState } from 'react'\r\nimport { useSprings, animated, interpolate } from 'react-spring'\r\nimport { useGesture } from 'react-use-gesture'\r\nimport './styles.css'\r\n\r\nconst cards = [\r\n  './assets/isaque.png',\r\n  './assets/leonardo.png',\r\n  './assets/iuri.png',\r\n  './assets/fernanda.png',\r\n  './assets/wemilly.png',\r\n  './assets/raylson.png',\r\n  './assets/gustavo.png',\r\n]\r\n\r\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\r\nconst to = i => ({ x: 0, y: i * -4, scale: 1, rot: -10 + Math.random() * 20, delay: i * 100 })\r\nconst from = i => ({ x: 0, rot: 0, scale: 1.5, y: -1000 })\r\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\r\nconst trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\r\n\r\nfunction Deck() {\r\n  const [gone] = useState(() => new Set()) // The set flags all the cards that are flicked out\r\n  const [props, set] = useSprings(cards.length, i => ({ ...to(i), from: from(i) })) // Create a bunch of springs using the helpers above\r\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\r\n  const bind = useGesture(({ args: [index], down, delta: [xDelta], distance, direction: [xDir], velocity }) => {\r\n    const trigger = velocity > 0.2 // If you flick hard enough it should trigger the card to fly out\r\n    const dir = xDir < 0 ? -1 : 1 // Direction should either point left or right\r\n    if (!down && trigger) gone.add(index) // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\r\n    set(i => {\r\n      if (index !== i) return // We're only interested in changing spring-data for the current spring\r\n      const isGone = gone.has(index)\r\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0 // When a card is gone it flys out left or right, otherwise goes back to zero\r\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0) // How much the card tilts, flicking it harder makes it rotate faster\r\n      const scale = down ? 1.1 : 1 // Active cards lift up a bit\r\n      return { x, rot, scale, delay: undefined, config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 } }\r\n    })\r\n    if (!down && gone.size === cards.length) setTimeout(() => gone.clear() || set(i => to(i)), 600)\r\n  })\r\n  // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\r\n  return props.map(({ x, y, rot, scale }, i) => (\r\n    <animated.div key={i} style={{ transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`) }}>\r\n      {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\r\n      <animated.div {...bind(i)} style={{ transform: interpolate([rot, scale], trans), backgroundImage: `url(${cards[i]})` }} />\r\n    </animated.div>\r\n  ))\r\n}\r\n\r\nrender(<Deck />, document.getElementById('root'))\r\n"],"sourceRoot":""}